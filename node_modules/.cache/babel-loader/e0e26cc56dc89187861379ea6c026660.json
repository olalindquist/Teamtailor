{"ast":null,"code":"var _jsxFileName = \"/home/ola/ttailor/Teamtailor/src/components/JobViewer.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport JobListHandler from \"./JobListHandler\";\nimport MemoryHandler from \"./MemoryHandler\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction JobViewer() {\n  _s();\n\n  const [jobdata, setJobdata] = useState();\n  const [currentJob, setCurrentJob] = useState();\n  const [gotCurrentJob, setGotCurrentJob] = useState(false);\n  const [jobPointer, setJobPointer] = useState(0);\n  const [memory, setMemory] = useState([]);\n\n  function setCurrentJobTo(job) {\n    if (gotCurrentJob) {\n      let i = 0;\n      jobdata.data.forEach(j => {\n        i++;\n\n        if (j.id === jobdata.data[jobPointer]) {\n          setCurrentJob(jobdata.data[i]);\n          setJobPointer(i);\n        }\n      });\n      setCurrentJob(job);\n    }\n  }\n\n  function remember() {\n    if (gotCurrentJob) {\n      let currentJobInMemory = false;\n      memory.forEach(job => JSON.stringify(job.id) === JSON.stringify(currentJob.id) ? currentJobInMemory = true : null);\n\n      if (!currentJobInMemory) {\n        setMemory(memory => [...memory, currentJob]);\n      }\n    }\n  }\n\n  function clearMemory() {\n    setMemory([]);\n  }\n\n  function nextJob() {\n    if (jobPointer < jobdata.data.length) {\n      let newval = jobPointer + 1;\n      setJobPointer(newval);\n      setCurrentJob(jobdata.data[jobPointer]);\n    }\n  }\n\n  function previousJob() {\n    if (jobPointer !== 0) {\n      let newval = jobPointer - 1;\n      setJobPointer(newval);\n      setCurrentJob(jobdata.data[jobPointer]);\n    }\n  }\n\n  function getResult() {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Token token=a5o4wu2Ghgnehh_kX79193wPTv9bD4A72hY5mtzv\");\n    myHeaders.append(\"X-Api-Version\", \"20210218\");\n    var requestOptions = {\n      method: \"GET\",\n      headers: myHeaders,\n      redirect: \"follow\"\n    };\n    fetch(\"https://api.teamtailor.com/v1/jobs\", requestOptions).then(response => response.json()).then(result => {\n      setJobdata(result);\n      setCurrentJob(result.data[0]);\n      setGotCurrentJob(true);\n    }).catch(error => console.log(\"error\", error));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" JOBVIEWER \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(MemoryHandler, {\n        remember: remember,\n        clearMemory: clearMemory,\n        list: memory,\n        setCurrent: setCurrentJobTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), gotCurrentJob ? /*#__PURE__*/_jsxDEV(JobListHandler, {\n        currentJob: currentJob,\n        next: nextJob,\n        prev: previousJob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getResult,\n      children: \"Check for Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(JobViewer, \"DmMjQoLDuyJ5k0O+azsy/y6AI8Y=\");\n\n_c = JobViewer;\nexport default JobViewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobViewer\");","map":{"version":3,"names":["React","useState","JobListHandler","MemoryHandler","JobViewer","jobdata","setJobdata","currentJob","setCurrentJob","gotCurrentJob","setGotCurrentJob","jobPointer","setJobPointer","memory","setMemory","setCurrentJobTo","job","i","data","forEach","j","id","remember","currentJobInMemory","JSON","stringify","clearMemory","nextJob","length","newval","previousJob","getResult","myHeaders","Headers","append","requestOptions","method","headers","redirect","fetch","then","response","json","result","catch","error","console","log"],"sources":["/home/ola/ttailor/Teamtailor/src/components/JobViewer.tsx"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport JobListHandler from \"./JobListHandler\";\nimport MemoryHandler from \"./MemoryHandler\";\n\nfunction JobViewer(): JSX.Element {\n  const [jobdata, setJobdata] = useState<any>();\n  const [currentJob, setCurrentJob] = useState<any>();\n  const [gotCurrentJob, setGotCurrentJob] = useState<boolean>(false);\n  const [jobPointer, setJobPointer] = useState<number>(0);\n  const [memory, setMemory] = useState<any[]>([]);\n \n\n    function setCurrentJobTo(job: any) {\n\n        if (gotCurrentJob) {\n    let i: number = 0;\n    jobdata.data.forEach((j: any) => {\n      i++;\n      if (j.id === jobdata.data[jobPointer]) {\n        setCurrentJob(jobdata.data[i]);\n        setJobPointer(i);\n      }\n    });\n\n            setCurrentJob(job);\n            \n        }}\n\n  function remember() {\n    if (gotCurrentJob) {\n      let currentJobInMemory: boolean = false;\n\n      memory.forEach((job: any) =>\n        JSON.stringify(job.id) === JSON.stringify(currentJob.id)\n          ? (currentJobInMemory = true)\n          : null\n      );\n      if (!currentJobInMemory) {\n        setMemory((memory) => [...memory, currentJob]);\n      }\n    }\n  }\n  function clearMemory() {\n    setMemory([]);\n  }\n\n  function nextJob(): void {\n    if (jobPointer < jobdata.data.length) {\n      let newval = jobPointer + 1;\n      setJobPointer(newval);\n      setCurrentJob(jobdata.data[jobPointer]);\n    }\n  }\n\n  function previousJob(): void {\n    if (jobPointer !== 0) {\n      let newval = jobPointer - 1;\n      setJobPointer(newval);\n      setCurrentJob(jobdata.data[jobPointer]);\n    }\n  }\n\n  function getResult(): void {\n    var myHeaders = new Headers();\n    myHeaders.append(\n      \"Authorization\",\n      \"Token token=a5o4wu2Ghgnehh_kX79193wPTv9bD4A72hY5mtzv\"\n    );\n    myHeaders.append(\"X-Api-Version\", \"20210218\");\n    var requestOptions: any = {\n      method: \"GET\",\n      headers: myHeaders,\n      redirect: \"follow\",\n    };\n\n    fetch(\"https://api.teamtailor.com/v1/jobs\", requestOptions)\n      .then((response) => response.json())\n      .then((result) => {\n        setJobdata(result);\n        setCurrentJob(result.data[0]);\n        setGotCurrentJob(true);\n      })\n      .catch((error) => console.log(\"error\", error));\n  }\n\n  return (\n    <div>\n      <h1> JOBVIEWER </h1>\n      <div>\n        <MemoryHandler\n          remember={remember}\n          clearMemory={clearMemory}\n          list={memory}\n          setCurrent={setCurrentJobTo}\n        />\n        {gotCurrentJob ? (\n          <JobListHandler\n            currentJob={currentJob}\n            next={nextJob}\n            prev={previousJob}\n                />\n        ) : (null\n        )}\n      </div>\n      <button onClick={getResult}>Check for Jobs</button>\n      <div></div>\n    </div>\n  );\n}\n\nexport default JobViewer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}